// webppl politeness.wppl --require utils

// a world has both a state and a valence
var worlds = [
	{state: "terrible", valence: 1},
	{state: "bad", valence: 2},
	{state: "okay", valence: 3},
	{state: "good", valence: 4},
	{state: "amazing", valence: 5}
]

// array of the valence values
var worldValues = _.pluck(worlds, "valence")
var meanWorldValues = _.pluck(worlds, "valence").reverse()

var statePrior = function(){
	return uniformDraw(worlds)
}

var binaryValence = function(world){
	return flip(world.valence)
}

// array of the state values (also the utterances)
var stateValues = _.pluck(worlds, "state")

var utterancePrior = function(){
	return uniformDraw(stateValues)
}

var beingNiceOrMean = function(nice, valence){
	var valenceValues = nice ? worldValues : meanWorldValues
	var i = valenceValues.indexOf(valence)
	var k = nice ? valenceValues.slice(i) : valenceValues.slice(i).reverse()
	// anything of lower valence (for nice) gets low probability
	var weights = append(fillArray(i, 0.0001), k)
	return valenceValues[discrete(weights)]
}


var politeRSA = function(experimentalCondition, opts, RSAparams, priorParams){

	var stochasticWords = opts.stochasticWords
	var experimentalWords = opts.experimentalWords
	var stochasticValence = opts.stochasticValence

	var speakerOptimality = RSAparams.speakerOptimality

	var honestyWeights = discretizeBeta(priorParams.honestGamma, priorParams.honestDelta)
	var kindnessWeights = discretizeBeta(priorParams.kindGamma, priorParams.kindDelta)

	var meaning = stochasticWords == "stoachastic" ? 
		function(words, state){
			return words=="terrible" ? state == stateValues[discrete([10,1,0.1,0.01,0.001])] : 
					words=="bad" ? state == stateValues[discrete([1,10,1,0.1,0.01])] : 
					words=="okay" ? state == stateValues[discrete([0.1,1,10,1,0.1])] : 
					words=="good" ? state == stateValues[discrete([0.01,0.1,1,10,1])] : 
					words=="amazing" ? state == stateValues[discrete([0.001,0.01,0.1,1,10])] :
					true
		} : stochasticWords == "experimental"  ? 
		function(words, state){
				return words=="terrible" ? state == stateValues[discrete([95,30,2,2,2])] : 
						words=="bad" ? state == stateValues[discrete([85,85,2,2,2])] : 
						words=="okay" ? state == stateValues[discrete([1,25,100,65,35])] : 
						words=="good" ? state == stateValues[discrete([2,5,55,95,93])] : 
						words=="amazing" ? state == stateValues[discrete([2,2,2,65,100])] :
						words=="mu" ? true :
						true
		} :
		function(words, state){
			return words==state
		}

	var listener0 = cache(function(utterance, goals, stochasticWords) {
	  Enumerate(function(){
		var world = statePrior()
		var m = meaning(utterance, world.state)
		condition(m)
		return world
	  })
	})


	var speaker1 = cache(function(world, speakerGoals, stochasticWords) {
	  Enumerate(function(){
	    var utterance = utterancePrior()
	    var L0 = listener0(utterance)

	    var epistemicUtility = marginalizeERP(L0, "state").score([],world.state)
	    var niceUtility = expectation(marginalizeERP(L0, "valence"))
	    var jointUtility = speakerGoals.honesty*epistemicUtility + 
	    					speakerGoals.kindness*niceUtility

	    factor(jointUtility)

	    return utterance
	  })
	})


	var listener1 = function(utterance, knowledge, stochasticWords) {
	  Enumerate(function(){
	    var world = statePrior()

	    var speakerGoals = {
	    	honesty: [0.1, 0.3, 0.5, 0.7, 0.9][discrete(honestyWeights)],
	    	kindness: [0.1, 0.3, 0.5, 0.7, 0.9][discrete(kindnessWeights)]
	   	}

	   	condition(knowledge ? knowledge == world.state : true)

	    var S1 = speaker1(world, speakerGoals)

	    factor(speakerOptimality*S1.score([],utterance))

	    return speakerGoals
	  })
	}

	return listener1(experimentalCondition.utterance, 
						experimentalCondition.knowledge, 
						stochasticWords)
	// return speaker1({state: "good", valence: 0.75}, {honesty: 0.7, kindness: 0.5}, false, false)
	// return listener0("good", {honest:false, kind: true}, true, true)

}

// var posterior = politeRSA(
// {
// 	utterance: "amazing", 
// 	knowledge: "amazing"
// },
// {
// 	stochasticWords:false, 
// 	stochasticValence:true
// }, 
// {
// 	speakerOptimality:10
// },
// {
// 	honestGamma: 0.5,
// 	honestDelta:2,
// 	kindGamma:0.5, 
// 	kindDelta:2
// })

// console.log("expected honesty " + expectation(marginalizeERP(posterior, "honesty")))
// console.log("expected kindness " + expectation(marginalizeERP(posterior, "kindness")))

// webppl politeness.wppl --require utils

// a world has both a state and a valence
// var worlds = [
// 	{state: "terrible", valence: 1},
// 	{state: "bad", valence: 2},
// 	{state: "okay", valence: 3},
// 	{state: "good", valence: 4},
// 	{state: "amazing", valence: 5}
// ]

// var states = [0,1,2,3,4]
var states = [1,2,3,4,5]
var utterances = ["terrible","bad","okay","good","amazing"]
// array of the valence values
// var worldValues = _.pluck(worlds, "valence")
// var meanWorldValues = _.pluck(worlds, "valence").reverse()

var statePrior = function(){
	return uniformDraw(states)
}


// array of the state values (also the utterances)
// var stateValues = _.pluck(worlds, "state")

var utterancePrior = function(){
	return uniformDraw(utterances)
}

var politeRSA = function(experimentalCondition, opts, RSAparams, priorParams, semantics, queryStatement){

	var stochasticWords = opts.stochasticWords
	var experimentalWords = opts.experimentalWords
	var stochasticValence = opts.stochasticValence

	var speakerOptimality = RSAparams.speakerOptimality

	var honestyWeights = discretizeBeta(priorParams.honestGamma, 
										priorParams.honestDelta, 
										[0.1,0.3,0.5,0.7,0.9]
										// [0.05,0.2,0.4,0.6,0.8,0.95]
										)
	var kindnessWeights = discretizeBeta(priorParams.kindGamma, 
										priorParams.kindDelta, 
										[0.1,0.3,0.5,0.7,0.9]
										// [0.05,0.2,0.4,0.6,0.8,0.95]
										)
	var meannessWeights = discretizeBeta(priorParams.meanGamma, 
										priorParams.meanDelta, 
										[0.1,0.3,0.5,0.7,0.9]
										// [0.05,0.2,0.4,0.6,0.8,0.95]
										)

	// var kindnessWeights = discretizeBeta(priorParams.kindGamma, 
	// 									priorParams.kindDelta, 
	// 									[0.05,0.15,0.25,0.35,0.45,
	// 									 0.55,0.65,0.75,0.85,0.95])

	// var meannessWeights = discretizeBeta(priorParams.meanGamma, priorParams.meanDelta)
	// var honestyWeights = [1,1,1,1,1]
	// var kindnessWeights = [1,1,1,1,1]
	// var kindnessWeights = [1,1,1,1,1]
	// var kindnessWeights = [1,1,1,1,1,1,1,1,1,1]

	// var literalSemantics = {
	// 	"terrible":[.95,.30,.02,.02,.02],
	// 	"bad":[.85,.85,.02,.02,.02],
	// 	"okay":[0.01,0.25,1,.65,.35],
	// 	"good":[.02,.05,.55,.95,.93],
	// 	"amazing":[.02,.02,.02,.65,1]
	// }

	var meaning = function(words, state){
		// console.log(words + " " + state + " " + semantics[[words,state+1].join()])
	    return words=="mu" ? true : flip(semantics[[words,state].join()])
	}


	var listener0 = cache(function(utterance) {
	  Enumerate(function(){
		var state = statePrior()
		var m = meaning(utterance, state)
		condition(m)
		return state
	  })
	})


	var speaker1 = cache(function(state, speakerGoals) {
	  Enumerate(function(){
	    var utterance = utterancePrior()

	    var L0 = listener0(utterance)

	    var epistemicUtility = Math.exp(L0.score([],state))
	    var socialUtility = expectation(L0)/5

	    var eUtility = speakerGoals.honesty*epistemicUtility 
	    var sUtility = speakerGoals.kindness*socialUtility
	    var mUtility = speakerGoals.meanness*socialUtility

	    factor(eUtility+sUtility-mUtility)

	    return utterance

	  })
	})


	var listener1 = function(exptCondition, queryStatement) {
	  Enumerate(function(){
	  	var utterance = exptCondition.utterance
	  	var trueState = exptCondition.state
	  	var knownGoals = exptCondition.goal
	    var state = statePrior()

	    var speakerGoals = {
	      honesty: [0.1,0.3,0.5,0.7,0.9][discrete(honestyWeights)],
	      kindness: [0.1,0.3,0.5,0.7,0.9][discrete(kindnessWeights)],
	      meanness: [0.1,0.3,0.5,0.7,0.9][discrete(meannessWeights)]
	     }

	    condition(trueState ? trueState == state : true)

	    // foreach(_.keys(knownGoals), function(g){
	    // 	// g == "meanness" ? 
	    // 	// condition(speakerGoals["kindness"] < (1- knownGoals["meanness"])) : 
		   //  condition(speakerGoals[g] > knownGoals[g])
	    // })

	    var S1 = speaker1(state, speakerGoals)

	    factor(speakerOptimality*S1.score([],utterance))

	    // var returnGoals = {honesty: speakerGoals.honesty,
	    //       kindness: speakerGoals.kindness > 0 ? speakerGoals.kindness : 0,
	    //       meanness: speakerGoals.kindness > 0 ? 0 : -speakerGoals.kindness}

	    var returnStatement = {
	      state: state*20,
	      goals: speakerGoals
	    }

	    return returnStatement[queryStatement]
	  })
	}
	return listener1(experimentalCondition, queryStatement)
}
// time webppl BDA_politeRSA.wppl --require mht --require utils
var fpath = "/Users/mht/Documents/research/polgrice/experiment/data_analysis/data/"

var rawData = utils.readCSV(fpath+"goal_unknown_rounded.csv").data
var df = dataFrame(rawData, ["roundval"])

var allKnowledges = _.uniq(_.pluck(df,"knowledge"))
var allUtterances = _.uniq(_.pluck(df,"utterance"))
var allStates = _.uniq(_.pluck(df,"true_state"))
var allGoals = ["nice","honest","mean"] // _.uniq(_.pluck(df,"goal"))

var RSAopts = {
	stochasticWords:false,//"experimental", 
	stochasticValence:false
}

var pre1 = RSAopts.stochasticWords ? 
				"stochWords-" : ""
var pre2 = RSAopts.stochasticValence ? 
				"stochVal-" : ""

var optPrefix = pre1 + pre2
				
console.log("running " + optPrefix)

var goalDictionary = {
	"nice": "kindness",
	"honest" : "honesty",
	"mean" : "meanness"
}

var stateDictionary = {
	"terrible":1,
	"bad":2,
	"okay":3,
	"good":4,
	"amazing":5
}
// run BDA on literal semantics data
var sem_mhiter = 50000
var sem_burn = sem_mhiter/2
var incrOpts = {burn:sem_burn, verbose: true, verboseLag: sem_mhiter/10}
// semanticsBDA()
var semanticsERP = IncrementalMH(semanticsBDA, sem_mhiter, incrOpts)


var logistic = function(x0, midpoint,k){
  return 1 / (1 + Math.exp(-k*(midpoint - x0)))
}
var roundToBin = function(x){
  var roundFive = x < 0.2 ? 0.1 :
                  x < 0.4 ? 0.3 :
                  x < 0.6 ? 0.5 :
                  x < 0.8 ? 0.7 :
                  0.9
  return roundFive
}


var linkingFunction = function(erp, k, x0){

}
// var semanticsERPobject = _.object(
// 	map(function(s){
// 		return [s, _.object(map(function(u){
// 			return [u, marginalize(semanticsERP, [u,s])]
// 		}, allUtterances))]
// },allStates))

// sample(semanticsERP)

var dataAnalysis = function(){

	// var t0 = utils.getTime()
	var RSAparams = {
		speakerOptimality : uniform(0,20),
		alpha: uniform(0, 10)
	}

	// var priorParams = {
	// 	honestGamma : uniform(0,1),
	// 	honestDelta : uniform(0,20),
	// 	kindGamma : uniform(0,1),
	// 	kindDelta : uniform(0,20),
	// 	meanGamma : 0.5,
	// 	meanDelta : 2
	// 	// meanGamma : uniform(0,1),
	// 	// meanDelta : uniform(0,20)
	// }


	var priorParams = {
		honestGamma : 0.5,
		honestDelta : 2,
		kindGamma : 0.5,
		kindDelta : 2,
		meanGamma : 0.5,
		meanDelta : 2
	}

	var semantics = sample(semanticsERP)


	foreach(allStates, function(state){

		var stateData = subset(df, "true_state", state)

		foreach(allUtterances, function(utterance){

			var utteranceData = subset(stateData, "utterance", utterance)

			var predictiveERP = politeRSA(
				{
					utterance: utterance,
					state: stateDictionary[state]
				},
				RSAopts,
				RSAparams,
				priorParams,
				semantics,
				"goals")

			foreach(allGoals, function(goal){

				var dataPoints = _.pluck(subset(utteranceData, "goal", goal), "roundval")
				var goalERP = marginalize(predictiveERP, goalDictionary[goal])

				// var linkedGoalERP = linkingFunction(goalERP, midpoint, k)

				var likelihoodOfData = sum(map(function(d){return goalERP.score([], d)}, dataPoints))

				factor(likelihoodOfData)

				query.add(["predictive" ,stateDictionary[state], utterance, goal], expectation(goalERP))

			})

		})

	})

	query.add(["parameter","speakerOptimality", "NA", "NA"], RSAparams.speakerOptimality)
	query.add(["parameter","alpha", "NA", "NA"], RSAparams.alpha)
	// query.add(["parameter","honesty", "gamma", "NA"], priorParams.honestGamma)
	// query.add(["parameter","honesty", "delta", "NA"], priorParams.honestDelta)
	// query.add(["parameter","kindness", "gamma", "NA"], priorParams.kindGamma)
	// query.add(["parameter","kindness", "delta", "NA"], priorParams.kindDelta)
	// query.add(["parameter","meanness", "gamma", "NA"], priorParams.meanGamma)
	// query.add(["parameter","meanness", "delta", "NA"], priorParams.meanDelta)
		// var t1 = utils.getTime()
	// console.log((t1-t0)/1000)
	return query
}


var inference ='MH'
var samples = 5000
var burn =  samples/2
var resultsERP = MCMC(dataAnalysis, {samples:samples/2, burn:burn, verbose:true})

console.log('inference complete... printing')

var outfile = "results/bda-politeRSA-informativity-expectation-goalPrior-"+optPrefix+"sopt-"+ 
						inference + samples + "burn" + burn + 
						"semantics-bern-" + sem_mhiter/1000 + "k-b" + sem_burn/1000 +"ka.csv"

utils.erpWriter(resultsERP, outfile)

console.log('output written to ' + outfile)



// var semantics = sample(semanticsERP)

// var predictiveERP = politeRSA(
// 	{
// 		utterance: "amazing",
// 		knowledge: 3
// 	},
// 	RSAopts,
// 	 {
// 		speakerOptimality : 5
// 	},
//  {
// 	honestGamma : 0.5,
// 	honestDelta : 2,
// 	kindGamma : 0.5,
// 	kindDelta : 2
// },
// 	semantics)

// predictiveERP



// semantics

// var RSAparams = {
// 	speakerOptimality :5
// }




// var utterance = "amazing"
// var state = 2

// var predictiveERP = politeRSA(
// 	{
// 		utterance: utterance,
// 		knowledge: state
// 	},
// 	RSAopts,
// 	RSAparams,
// 	priorParams,
// 	semantics)

// var goal = "nice"
// var goalERP = marginalize(predictiveERP, goalDictionary[goal])

// // expectation(goalERP)
// goalERP
// var responses = 

// responses
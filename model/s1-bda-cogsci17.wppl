// webppl s1-bda-cogsci17.wppl --require webppl-json
// requires webppl package: webppl-json

var index = last(process.argv) // load index as last command line index

var utterances = [
  "yes_terrible","yes_bad","yes_okay","yes_good","yes_amazing",
  "not_terrible","not_bad","not_okay","not_good","not_amazing"
];

var negative_utterances = [
  "not_terrible","not_bad","not_okay","not_good","not_amazing"
];

var states = [1,2,3,4,5];

var statePrior = function(){
  return uniformDraw(states);
};

var isNegation = function(utt){
  return (utt.split("_")[0] == "not")
};

// measured in Experiment 1
var literalSemantics = json.read('data/literal_semantics.json');
var data = json.read('data/utterance.json')

var litSemanticsPosteriorObj = _.object(map(function(u){
  return [u, _.object(map(function(s){
    var litParams = _.where(literalSemantics, {state: s, utterance: u})[0]
    return [s, {a: litParams.posterior_b1, b: litParams.posterior_b2}]
  }, states))]
}, utterances))

var round = function(x){
  return Math.round(x * 100) / 100
}

var weightBins = map(round, _.range(0,1, 0.05))
var phiWeights = repeat(weightBins.length, function(){1})


var goals = _.uniq(_.pluck(data, "goal"));

var states = _.uniq(_.pluck(data, "true_state"));

var model = function(){

  var litSemantics = _.object(map(function(u){
    return [u, _.object(map(function(s){
      var litParams = litSemanticsPosteriorObj[u][s];
      return [s, beta(litParams)]
    }, states))]
  }, utterances))

  var RSAparameters = {
    speakerOptimality: uniformDrift({a: 0, b: 20, width:2}),
    alpha: uniformDrift({a: 0, b: 5, width:0.5}),
    cost: uniformDrift({a: 1, b: 10, width:0.25})
  };

  var cost_yes = 1;
  var uttCosts = map(function(u) {
    return isNegation(u) ? Math.exp(-RSAparameters.cost) : Math.exp(-cost_yes)
  }, utterances)

  var utterancePrior = Infer({model: function(){
    return utterances[discrete(uttCosts)];
  }});

  var meaning = function(words, state){
    return flip(litSemantics[words][state]);
  };

  var listener0 = cache(function(utterance) {
    Infer({method: "enumerate"}, function(){
      var state = uniformDraw(states);
      var m = meaning(utterance, state);
      condition(m);
      return state;
    });
  }, 10000);

  var speaker1 = cache(function(state, speakerGoals) {
    Infer({method: "enumerate"}, function(){
      var utterance = sample(utterancePrior);

      var speakerOptimality = RSAparameters.speakerOptimality;
      var alpha = RSAparameters.alpha;

      var L0 = listener0(utterance);

      var epistemicUtility = L0.score(state);
      var socialUtility = expectation(L0, function(s){return alpha*s});

      var eUtility = speakerGoals.phi*epistemicUtility;
      var sUtility = (1-speakerGoals.phi)*socialUtility;

      var speakerUtility = eUtility+sUtility;

      factor(speakerOptimality*speakerUtility);

      return utterance;
    })
  }, 10000)


  var goalWeightsAndPostPred = map(function(goal){

    var goalWeights = {
      phi: uniformDrift({a:0,b:1, width:0.1})
    }

    var postPred = map(function(state){

      var utteranceData = _.pluck(_.where(data, {true_state: state, goal: goal}), "utterance");

      var exptConditionInfo = {
        state: state,
        utterance: false,
        goalWeights: goalWeights
      };

      var RSApredictions = speaker1(exptConditionInfo.state,
                                      exptConditionInfo.goalWeights);

      mapData({data: utteranceData}, function(d){
        observe(RSApredictions, d)
      });

      var postSupport = RSApredictions.support();

      var postPredictive = map(function(u){
        return {
          key: "posteriorPredictive",
          goal: goal,
          state: state,
          utt: u,
          val: Math.exp(RSApredictions.score(u))
        }
      }, postSupport)


      var negEndorsement = sum(map(function(u){
        return Math.exp(RSApredictions.score(u))
      }, negative_utterances))

      return _.flatten([postPredictive, {
        key: "posteriorPredictive",
        goal: goal,
        state: state,
        utt: "negation",
        val: negEndorsement
      }])

    }, states)

    return [
      postPred,
      {key: "phi", goal: goal, state: "NA", utt: "NA", val: goalWeights.phi}
    ]

  }, goals)

  var returnList = _.flatten([
    goalWeightsAndPostPred,
    //litSemantics,
    {key: "speakerOptimality", goal: "NA", utt: "NA", state: "NA", val: RSAparameters.speakerOptimality},
    // {key: "speakerOptimality2", goal: "NA", utt: "NA", state: "NA", val: RSAparameters.speakerOptimality2},
    {key: "alpha", goal: "NA", utt: "NA", state: "NA", val: RSAparameters.alpha},
    {key: "cost", goal: "NA", utt: "NA", state: "NA", val: RSAparameters.cost}
  ])

  var returnObj = _.object(map(function(i){
    [i.key + "_" + i.goal + "_" + i.state + "_" + i.utt, i.val]
  }, returnList))

  return returnObj

}

var numSamples = 1000;
var method = "MCMC";
var samples = numSamples;
var burn = numSamples / 2;
var posterior = Infer({model, method, samples, burn, verbose: true})
var filename = 'results/cogsci17/bda-s1-mcmc'+
numSamples+'_burn'+burn+'_chain'+index+'.json'
json.write(filename, posterior)

console.log("output written to " + filename)

// time webppl generateRSAdata.wppl --require mht --require utils

var sem_mhiter = 50000
var sem_burn = sem_mhiter/2
var incrOpts = {burn:sem_burn, verbose: true, verboseLag: sem_mhiter/10}
var semanticsERP = IncrementalMH(semanticsBDA, sem_mhiter, incrOpts)

var samples = 100

var priorParams = {
	includeMeanness: false,
	honestGamma: 0.5,
	honestDelta : 2,
	kindGamma : 0.5,
	kindDelta : 2,
	meanGamma : 0.5,
	meanDelta : 2
}

var meanPrefix = priorParams.includeMeanness == "oneScale" ? "1scale" :
					priorParams.includeMeanness ? 1 : 0

var prefix = "meanness-"+meanPrefix+"_samples"+samples+"_semIncrMH" + sem_mhiter/1000 + "k_b" +sem_burn/1000+ "k"
var filename1 = "results/simulated_data/pRSA-and-RSA-predictions"+prefix+".csv"
var header = "model,parameter,utterance,speaker_optimality,alpha,phi,batch,Value"
var h1file = mht.openFile(filename1)
mht.writeLine(h1file, header)


var addNoise = function(erp, phi){
    Enumerate(function(){
        var x = flip(1-phi) ? 
                    sample(erp) :
                    uniformDraw([20,40,60,80,100])
        return x
    })
}

foreach([1,3,5,10,15,20], function(speaker_optimality){
	var t0 = mht.getTime()
	foreach(_.range(0,samples), function(i){
		console.log(i + "out of " + samples)
		var semantics = sample(semanticsERP)
		
		foreach(["terrible","bad","okay","good","amazing"], function(utterance){
			// console.log(utterance)
			var weights = {
				honesty: 1,
				kindness: 0,
				meanness: 0
			}

			var condParams = {utterance: utterance}
			var RSAparams = {
				speakerOptimality : speaker_optimality,
				alpha: 0.1
			}

			var RSA = politeRSA(
				condParams,
				RSAparams,
				priorParams,
				weights,
				semantics,
				"state")

			foreach([0.01,0.05,0.1,0.2,0.3,0.4,0.5], function(phi){

				var rsa_withNoise = addNoise(RSA, phi)
				// sample 50 subjects
				repeat(50, function(){
					var subject_prediction = sample(rsa_withNoise)
					mht.writeLine(h1file, ["RSA","state",utterance, speaker_optimality,"NA",phi,i,subject_prediction].join(','))
				})

			})

			foreach([0.7,1.0,1.3,1.6,2], function(alpha){

				var pRSA = politeRSA(
							condParams,
							{
							speakerOptimality : speaker_optimality,
							alpha: alpha
							},
							priorParams,
							false,
							semantics,
							"state")

				foreach([0.01,0.05,0.1,0.2,0.3,0.4,0.5], function(phi){

					var prsa_withNoise = addNoise(pRSA, phi)
					// sample 50 subjects
					repeat(50, function(){
						var subject_prediction = sample(prsa_withNoise)
						mht.writeLine(h1file, ["pRSA","state",utterance, speaker_optimality,alpha,phi,i,subject_prediction].join(','))
					})

				})

			})
		})
})
console.log(speaker_optimality + " complete... time " + (mht.getTime()-t0)/1000)
})

mht.closeFile(h1file)
console.log("output written to ... " + filename1)




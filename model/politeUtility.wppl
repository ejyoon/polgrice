// webppl politeUtility.wppl

var foreach = function(lst, fn) {
    var foreach_ = function(i) {
        if (i < lst.length) {
            fn(lst[i]);
            foreach_(i + 1);
        }
    };
    foreach_(0);
};

var marginalizeERP = function(myERP, label){
  Enumerate(function(){
    var x = sample(myERP)
    return x[label]
  })
}

var logNormalPDF = function(x, mu, sigma){
  var coef = (1 / (x*sigma*Math.sqrt(2*Math.PI)))
  var fe = Math.exp(-(Math.pow(Math.log(x)-mu,2))/(2*Math.pow(sigma,2)))
  return coef*fe
}

var discretizedLogNormal = function(mu, sigma, bins){
  return Enumerate(function(){
    var probs = map(function(b){return logNormalPDF(b, mu, sigma)}, bins)
    return bins[discrete(probs)]
  })
}


var alpha = 10
var states = [1,2,3,4,5]
var utterances = ["terrible","bad","okay","good","amazing"]

var statePrior = function(){
  // return states[discrete([3,30,100,30,3])]
  return uniformDraw(states)
}

var utterancePrior = function(){
  return uniformDraw(utterances)
}



var speakerOptimality = 10
var bins = [0.1, 1, 5, 10, 20, 50, 100]
// var honestyPrior = discretizedLogNormal(2,1,bins)
// var kindnessPrior = discretizedLogNormal(2,1,bins)
// var meannessPrior = discretizedLogNormal(2,1,bins)

var honestyPrior = Enumerate(function(){return uniformDraw(bins)})
// var kindnessPrior = Enumerate(function(){return uniformDraw(bins)})
var kindnessPrior = Enumerate(function(){return uniformDraw([-100,-50,-20,-10,-5,-1,-0.1,0.1, 1, 5, 10,20, 50, 100])})
// var meannessPrior = Enumerate(function(){return uniformDraw(bins)})

// var kindnessWeights = [1,1,1,1,1,
                        // 1,1,1,1,1]

var literalSemantics = {
  "terrible":[.95,.85,.02,.02,.02],
  "bad":[.85,.95,.02,.02,.02],
  "okay":[0.02,0.25,0.95,.65,.35],
  "good":[.02,.05,.55,.95,.93],
  "amazing":[.02,.02,.02,.65,0.95]
}

var meaning = function(words, state){
    return words=="sayNothing" ? true : flip(literalSemantics[words][state-1])
} 

var roundTen = function(n){
  return Math.round(n*100)/100
}

var listener0 = cache(function(utterance) {
  Enumerate(function(){
  var state = statePrior()
  var m = meaning(utterance, state)
  condition(m)
  return state
  })
})


var speaker1 = cache(function(state, speakerGoals) {
  Enumerate(function(){
    var utterance = utterancePrior()

    var L0 = listener0(utterance)

    var epistemicUtility = L0.score([],state)
    var socialUtility = expectation(L0, function(s){return alpha*s})

    // var epistemicWeight = speakerGoals.honesty
    // var niceWeight =  speakerGoals.kindness 
    // var meanWeight = speakerGoals.meanness

    var eUtility = speakerGoals.honesty*epistemicUtility 
    var sUtility = speakerGoals.kindness*socialUtility
    // var mUtility = speakerGoals.meanness*socialUtility

    // console.log(utterance)
    // console.log(speakerGoals.meanness)
    // factor(eUtility+sUtility-mUtility)
    factor(eUtility+sUtility)

    return [utterance, eUtility, sUtility, eUtility+sUtility]
    // return utterance
  })
})



var listener1 = function(exptCondition, queryStatement) {
  Enumerate(function(){
    var utterance = exptCondition.utterance
    var trueState = exptCondition.state
    var knownGoals = exptCondition.goal
    var state = statePrior()

    var speakerGoals = {
      honesty: sample(honestyPrior),
      kindness: sample(kindnessPrior)
      // meanness: sample(meannessPrior)
     }

    condition(trueState ? trueState == state : true)

      // foreach(_.keys(knownGoals), function(g){
      //   condition(speakerGoals[g] > knownGoals[g])
      // })

    var S1 = speaker1(state, speakerGoals)

    factor(speakerOptimality*S1.score([],utterance))

    var returnStatement = {
      state: state,
      goals: speakerGoals
    }

    return returnStatement[queryStatement]
  })
}

// var rs1 = listener1(
// {
//   utterance: "amazing",
//   state: 1
// }, "goals")


// var allRes =  map(function(x){
//   var rs1 =  listener1(
// {
//   utterance: "amazing",
//   state: x
// }, "goals")
//   return rs1
// },[1,2,3,4,5])

// foreach(["honesty", "kindness"], function(g){
//   console.log(g+" goal")
//   foreach(allRes, function(rs){
//     console.log("s=1 ==> " + expectation(marginalizeERP(rs,g)))
//   })
// })

speaker1(1, {honesty:20, kindness:35, meanness:1})



// console.log("honesty when s=" + x + " ==> " + expectation(marginalizeERP(rs1, "honesty")))
// console.log("kindness when s=" + x + " ==> " +expectation(marginalizeERP(rs1, "kindness")))
// console.log("meanness when s=" + x + " ==> " +expectation(marginalizeERP(rs1, "meanness")))










































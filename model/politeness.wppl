// webppl politeness.wppl

///fold:
var marginalizeERP = function(myERP, label){
	Enumerate(function(){
		var x = sample(myERP)
		return x[label]
	})
}

var discretizeBeta = function(gamma, delta){
	var shape_alpha =  gamma * delta
	var shape_beta = (1-gamma) * delta
	var betaPDF = function(x){
	  return Math.pow(x,shape_alpha-1)*Math.pow((1-x),shape_beta-1)
	}
	return map(betaPDF, [0.1,0.3,0.5,0.7,0.9])
}

var fillArray = function(n, val){
	return repeat(n, function(x){return val})
}
///



// a world has both a state and a valence
var worlds = [
	{state: "terrible", valence: 0.01},
	{state: "bad", valence: 0.25},
	{state: "okay", valence: 0.5},
	{state: "good", valence: 0.75},
	{state: "amazing", valence: 0.99}
]

// array of the valence values
var worldValues = _.pluck(worlds, "valence")
var meanWorldValues = _.pluck(worlds, "valence").reverse()

var statePrior = function(){
	return uniformDraw(worlds)
}

var binaryValence = function(world){
	return flip(world.valence)
}

// array of the state values (also the utterances)
var stateValues = _.pluck(worlds, "state")



// var beingNiceOrMean = function(nice, valence){
// 	worldValues.indexOf(valence)
// 	var weights = nice ? worldValues : meanWorldValues
// 	// console.log(weights)
// 	return worldValues[discrete(weights)]
// }

var beingNiceOrMean = function(nice, valence){
	var valenceValues = nice ? worldValues : meanWorldValues
	var i = valenceValues.indexOf(valence)
	var k = nice ? valenceValues.slice(i) : valenceValues.slice(i).reverse()
	// anything of lower valence (for nice) gets low probability
	var weights = append(fillArray(i, 0.0001), k)
	return valenceValues[discrete(weights)]
}

// here, you get the joint goal (communicate state and valence)
// if both kind and honest
// if they're not kind, then the joint goal won't show up
// this will probably lead to the asymmetry, but it's sort of baked in
var qudFunction = function(speakerGoals){
		// idF is function(x){return x}
	return all(idF, _.values(speakerGoals)) ?
			function(w){return w} :
			speakerGoals.honest ? 
				function(w){return w.state} :
				function(w){return w.valence}
}


var politeRSA = function(experimentalCondition, opts, RSAparams, priorParams){

	var stochasticWords = opts.stochasticWords
	var stochasticValence = opts.stochasticValence
	var includeNull = opts.includeNull
	var onlyNull = opts.onlyNull

	var speakerOptimality = RSAparams.speakerOptimality

	var honestyWeights = discretizeBeta(priorParams.honestGamma, priorParams.honestDelta)
	var kindnessWeights = discretizeBeta(priorParams.kindGamma, priorParams.kindDelta)

	var meaning = stochasticWords ? 
		function(words, state){
			return words=="terrible" ? state == stateValues[discrete([10,1,0.1,0.01,0.001])] : 
					words=="bad" ? state == stateValues[discrete([1,10,1,0.1,0.01])] : 
					words=="okay" ? state == stateValues[discrete([0.1,1,10,1,0.1])] : 
					words=="good" ? state == stateValues[discrete([0.01,0.1,1,10,1])] : 
					words=="amazing" ? state == stateValues[discrete([0.001,0.01,0.1,1,10])] :
					words=="mu" ? true :
					true
		} : 
		function(words, state){
			return words=="mu" ? true : words==state
		}

	var utterancePrior = function(){
		return onlyNull ? uniformDraw(["mu",experimentalCondition.utterance, experimentalCondition.knowledge]) :
				includeNull ? uniformDraw(["mu","terrible", "bad", "okay", "good", "amazing"]) : 
				 uniformDraw(stateValues)
	}

	var listener0 = cache(function(utterance, goals, stochasticWords, stochasticValence) {
	  Enumerate(function(){
	    var world = statePrior()
	    var valence = stochasticValence ? binaryValence(world) : world.valence

	    var m = meaning(utterance, world.state)
	    var binaryWorld = {state: world.state, valence: valence}
	    
	    condition(m) 
	    
	    return qudFunction(goals)(binaryWorld)
	  })
	})


	var speaker1 = cache(function(world, speakerGoals, stochasticWords, stochasticValence, includeNull) {
	  Enumerate(function(){

	  	var goals = {
	  		honest: flip(speakerGoals.honesty),
	  		kind: flip(speakerGoals.kindness)
	  	}
	    var utterance = utterancePrior()

		// if goal is NOT honesty, then choose world in proportion to valence
	    var valence = goals.honest ? 
	    				world.valence :
	    				beingNiceOrMean(goals.kind, world.valence)

	    var valenceVal = stochasticValence ? flip(valence) : valence

	    // qud either returns true state, or valence, which may or may not be true
	    var qudVal = qudFunction(goals)({"state":world.state, 
		    							"valence":valenceVal})

	    var L0 = listener0(utterance, goals)

	    factor(L0.score([],qudVal))

	    return utterance
	  })
	})


	var listener1 = function(utterance, knowledge, stochasticWords, stochasticValence,includeNull) {
	  Enumerate(function(){
	    var world = statePrior()

	    var speakerGoals = {
	    	honesty: [0.1, 0.3, 0.5, 0.7, 0.9][discrete(honestyWeights)],
	    	kindness: [0.1, 0.3, 0.5, 0.7, 0.9][discrete(kindnessWeights)]
	   	}

	   	condition(knowledge ? knowledge == world.state : true)

	    var S1 = speaker1(world, speakerGoals, stochasticWords, stochasticValence, includeNull)

	    factor(speakerOptimality*S1.score([],utterance))

	    return speakerGoals
	  })
	}

	return listener1(experimentalCondition.utterance, 
						experimentalCondition.knowledge, 
						stochasticWords, 
						stochasticValence,
						includeNull)
	// return speaker1({state: "good", valence: 0.75}, {honesty: 0.7, kindness: 0.5}, false, false)
	// return listener0("good", {honest:false, kind: true}, true, true)

}

var posterior = politeRSA(
{
	utterance: "amazing", 
	knowledge: "good"
},
{
	stochasticWords:true, 
	stochasticValence:false,
	includeNull: true,
	onlyNull: true
}, 
{
	speakerOptimality:5
},
{
	honestGamma: 0.5,
	honestDelta:2,
	kindGamma:0.8, 
	kindDelta:4
})

console.log("expected honesty " + expectation(marginalizeERP(posterior, "honesty")))
console.log("expected kindness " + expectation(marginalizeERP(posterior, "kindness")))

{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 ;; Define evaluative states\
(define states\
  (list 0 1 2 3 4 5 6 7 8 9))\
\
\
;; Prior probability of each evaluative state\
(define (state-prior) \
  (multinomial states \
               '(0.2532552 \
                 0.2764323 \
                 0.3281250 \
                 0.3605469 \
                 0.4139323 \
                 0.4968750 \
                 0.5419271 \
                 0.5907552 \
                 0.5768229 \
                 0.5354167))) \
\
;; Prior on pressure to be 'polite': obscure the true state value, due to its undesirability \
(define (polite-prior state)\
  (if (flip (second (assoc state\
                           (list (list 0 0.9) \
                                 (list 1 0.8) \
                                 (list 2 0.7)\
                                 (list 3 0.6)\
                                 (list 4 0.5)\
                                 (list 5 0.4)\
                                 (list 6 0.3)\
                                 (list 7 0.2)\
                                 (list 8 0.1)\
                                 (list 9 0.01)                                 \
                                 ))))\
      1\
      0))\
\
;; Uniform prior over QUDs \
(define (qud-prior)\
  (multinomial (list 't 'p 'tp) '(0.25 0.25 0.50)))\
\
(define (qud-fn qud)\
  (second\
   (assoc qud\
          (list\
           (list 't (lambda (state politeness) state))\
           (list 'p (lambda (state politeness) politeness))\
           (list 'tp (lambda (state politeness) (list state politeness)))\
           ))))\
\
;; words and states associated with them\
(define (literal-interpretation words state)\
  (case words\
        (("great") (or (= state 8)(> state 8)))\
        (("not great") (< state 8))\
        (("bad") (or (= state 2)(< state 2)))\
        (("not bad") (> state 2))))\
\
\
;; define utterance\
(define utterances (list "great" "not great" "bad" "not bad"))\
\
(define (utterance-prior)\
  (multinomial utterances\
               '(1 1 1 1)))\
\
;; Literal listener, infers the qud value assuming the utterance is true of the state\
(define lit-listener\
  (mem\
   (lambda (utterance qud)\
     (enumeration-query\
      (define state (state-prior))\
      (define politeness (polite-prior state))\
      ((qud-fn qud) state politeness)\
      (literal-interpretation utterance state)))))\
\
;; Speaker, chooses an utterance to convey a particular value of the qud\
(define speaker\
  (mem\
   (lambda (val qud)\
     (enumeration-query\
      (define utterance (utterance-prior))\
      utterance\
      (equal? val (apply multinomial (lit-listener utterance qud)))\
      ))))\
\
;; Pragmatic listener, jointly infers the state, politeness, and QUD\
(define prag-listener\
  (mem\
   (lambda (utterance)\
     (enumeration-query\
      (define state (state-prior))\
      (define politeness (polite-prior state))\
      (define qud (qud-prior))\
;      (define qud 'p)\
;      (define qud 't)\
;      (define qud 'tp)\
      (define val ((qud-fn qud) state politeness)) \
      \
;      (list state politeness)\
;       politeness\
      state\
      \
      \
      (equal? utterance\
              (apply multinomial (speaker val qud)))\
      ;(equal? state 2)\
      ;(equal? politeness 1)\
      (equal? politeness 0)\
      ))))\
\
;; define speaker2, based on prag-listener\
(define speaker2\
  (mem\
   (lambda (state polite?)\
     (enumeration-query\
      (define utterance (utterance-prior))\
      \
      utterance\
      \
      (equal? (list state polite?) \
              (apply multinomial (prag-listener utterance)))))))\
\
\
;; (barplot (lit-listener "not great" 'tp))\
;; (barplot (speaker '(2 0) 'tp 'listener))\
(barplot (prag-listener "not bad") "state given 'not bad' and impolite")\
(barplot (prag-listener "not great") "state given 'not great' and impolite")\
(barplot (prag-listener "bad") "state given 'bad' and impolite")\
(barplot (prag-listener "great") "state given 'great' and impolite")\
\
;; (barplot (speaker2 1 0) "state=1 and not polite")\
;; (barplot (speaker2 1 1) "state=1 and polite")\
\
;; (barplot (speaker2 5 0) "state=5 and not polite")\
;; (barplot (speaker2 5 1) "state=5 and polite")\
\
;; (barplot (speaker2 3 0) "state=3 and not polite")\
;; (barplot (speaker2 3 1) "state=3 and polite")\
\
;; (barplot (speaker2 4 0) "state=4 and not polite")\
;; (barplot (speaker2 4 1) "state=4 and polite")\
\
;; (barplot (speaker2 7 0) "state=7 and not polite")\
;; (barplot (speaker2 7 1) "state=7 and polite")\
\
;(barplot (speaker2 0))\
;(barplot (speaker2 1))\
;(display (speaker2 3))\
;(barplot (speaker2 4))\
\
}